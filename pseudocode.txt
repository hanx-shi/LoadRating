I would like to design a GUI-based spreadsheet application that is specifically designed for entering data from as-built drawings of highway bridges for load rating software BrR. As I have been doing this manually, I have noticed patterns in bridges and components that lend well to it being stored as object-oriented data. The data structure is as follows:

Each project file is stored as a Bridge file that the application accesses to populate the information.
class Bridge
ArrayList<SpanSuperstructure> spans

class SpanSuperstructure
int index
String centerline
double startStation
double endStation
EnumMap<SpanLimitType, SpanLimitGeometry> spanLimits
ArrayList<Girder> girders
ArrayList<GirderPlacement> girders
ArrayList<CenterlineSegment> centerlineSegments
Length curbWidth
Length arclengthLeft
Length arclengthRight
-------------Implementation:-------------------
getChordLen() // Calculates the chord lengths for all centerline segments and sums, and returns them.
getRadius() // Returns the radius of the centerline
getNumGirders()
isDiscontinuous()
toString() // Returns index + centerline


public enum SpanLimitType { 
    START,
    END
}
public class SpanLimitGeometry 
    private Angle skewAngle; 
    private double overhang;
    private String bearingType;
    double cl_to_LEOD // centerline to Left End of Deck. By default is skew along the limit of the span.
    double cl_to_REOD 
---------------Implementation:-------------------
getRadialDistToLEOD() // returns a Length object
getRadialDistToREOD()
getSkewDistToLEOD()
getSkewDistToREOD()
getSkewAngle() 


class CenterlineSegment
    private SpanSuperstructure parent
    private double startStation;   // Absolute station where this segment begins
    private Length length;         // Length of the segment
    private double radius;         // Positive = curve, 0 = straight
    private Length lateralShift;   // Shift (jump) in ft at segment start, if any
int concavity (-1 = curves to left, 0 = straight, 1 = curves to the right looking stations ahead)
--------------Implementation:---------------------
getCurvature() // returns the radius of the curve multiplied by the concavity. 
getEndStation()
containsStation()


class Girder
String typeAASHTO
int strandsBottom
int strandsTop
Angle startCastingAngle 
Angle endCastingAngle 
Length length
Length cl_to_HoldDownPoint
Bearing startBearing
Bearing endBearing
---------------------------------------
getStartLongitudinalDistCLBearing()
getEndLongitudinalDistCLBearing()
getBearingToBearingDist()
getLenHarp()

class GirderPlacement 
    private Girder girder;            // The girder instance (from prototype or edited)
    private double offset;            // Distance from reference line (e.g. +5.0 ft from centerline)
    private ReferenceType reference;  // What the offset is measured from

class Bearing
double distanceA
---------------------------------------
getDistanceA()





/* The GUI utilizes a specialized input type to accommodate for Imperial units. */
import java.util.regex.*;

public class LengthParser {

    /**
     * Parses a string like "12 ft 2 1/2 in" or "14' 3\"" into a decimal feet value.
     * @param input the string from the text field
     * @return value in feet
     */
    public static double parseLengthToFeet(String input) {
        input = input.toLowerCase().trim().replaceAll("[\"]", " in").replaceAll("[']", " ft");

        double feet = 0;
        double inches = 0;

        // Match feet and inches using regex
        Pattern pattern = Pattern.compile(
            "(?:(\\d+)\\s*ft)?\\s*(?:(\\d+)\\s*(?:in|\"))?\\s*(?:(\\d+)\\s*/\\s*(\\d+)\\s*(?:in|\"))?"
        );
        Matcher matcher = pattern.matcher(input);

        if (matcher.find()) {
            if (matcher.group(1) != null) feet += Integer.parseInt(matcher.group(1));
            if (matcher.group(2) != null) inches += Integer.parseInt(matcher.group(2));
            if (matcher.group(3) != null && matcher.group(4) != null) {
                int num = Integer.parseInt(matcher.group(3));
                int denom = Integer.parseInt(matcher.group(4));
                inches += (double) num / denom;
            }
        }

        return feet + (inches / 12.0);
    }
}


// Use a Length class to store fractional values.
public class Length {
    private double feet;

    public Length(String input) {
        this.feet = LengthParser.parseLengthToFeet(input);
    }

    public double getFeet() { return feet; }
    public double getInches() { return feet * 12.0; }

    public String toString() {
        int wholeFeet = (int) feet;
        double inches = (feet - wholeFeet) * 12;
        int wholeInches = (int) inches;
        int fracNum = (int) Math.round((inches - wholeInches) * 16);
        return String.format("%d ft %d %d/16 in", wholeFeet, wholeInches, fracNum);
    }
}



// Use a Angle class to store angle values.
public class Angle {
    private double decimalDegrees;  // always stored internally in decimal degrees

    /** Construct from decimal degrees */
    public Angle(double decimalDegrees) {
        this.decimalDegrees = decimalDegrees;
    }

    /** Construct from DMS */
    public Angle(int degrees, int minutes, double seconds) {
        double abs = Math.abs(degrees) + minutes / 60.0 + seconds / 3600.0;
        this.decimalDegrees = degrees < 0 ? -abs : abs;
    }

    /** Construct from string (e.g. "45° 30' 15.5\"") */
    public static Angle fromDMSString(String input) {
        input = input.replaceAll("[^0-9.°'\"]+", "").trim();

        int deg = 0;
        int min = 0;
        double sec = 0.0;

        String[] parts = input.split("[°'\"]+");

        if (parts.length > 0) deg = Integer.parseInt(parts[0]);
        if (parts.length > 1) min = Integer.parseInt(parts[1]);
        if (parts.length > 2) sec = Double.parseDouble(parts[2]);

        return new Angle(deg, min, sec);
    }

    public double getDecimalDegrees() {
        return decimalDegrees;
    }

    public double getRadians() {
        return Math.toRadians(decimalDegrees);
    }

    /** Returns an array [deg, min, sec] */
    public double[] toDMS() {
        double abs = Math.abs(decimalDegrees);
        int deg = (int) abs;
        double rem = (abs - deg) * 60;
        int min = (int) rem;
        double sec = (rem - min) * 60;
        return new double[] {
            decimalDegrees < 0 ? -deg : deg, min, sec
        };
    }

    /** Returns a string like "45° 30' 15.5\"" */
    public String toDMSString() {
        double[] dms = toDMS();
        return String.format("%d° %d' %.4f\"", (int)dms[0], (int)dms[1], dms[2]);
    }

    @Override
    public String toString() {
        return String.format("%.6f°", decimalDegrees);
    }
}

Questions:
How would I implement this in a GUI? I would like to create a spreadsheet like application where all fields are visible in a table. There will be separate sheets:
1. Span Superstructure
2. Girder Details
3. Girder Registry
Additionally, there would be a visual window where there is a drawing of a span, but with text fields in the relevant locations so that the user can easily enter in the corresponding value for the part of the span. Then the data updates accordingly. 